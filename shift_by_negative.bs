<!--
Copyright (c) 2018 NVIDIA Corporation 
Author: Bryce Adelstein Lelbach <brycelelbach@gmail.com>

Distributed under the Boost Software License v1.0 (boost.org/LICENSE_1_0.txt)
-->
<pre class='metadata'>
Title: Shift-by-negative in `shift_left` and `shift_right`
H1: Shift-by-negative in <code>shift_left</code> and <code>shift_right</code>
Shortname: P1233
Revision: 1
Status: P
Group: WG21
Audience: LWG
Editor: Ashley Hedberg, Google, ahedberg@google.com
Editor: Matt Calabrese, Google, metaprogrammingtheworld@gmail.com
Editor: Bryce Adelstein Lelbach, NVIDIA, brycelelbach@gmail.com
URL: https://wg21.link/P1233R1
!Source: <a href="https://github.com/ahedberg/wg21_p1233_shift_by_negative/blob/master/shift_by_negative.bs">GitHub</a>
Issue Tracking: GitHub https://github.com/brycelelbach/wg21_p1233_shift_by_negative/issues
Metadata Order: Author, This Version, Source, Issue Tracking, Project, Audience
Markup Shorthands: markdown yes
No Abstract: yes
Toggle Diffs: yes
Boilerplate: style-syntax-highlighting off
</pre>

<style>
pre {
  margin-top: 0px;
  margin-bottom: 0px;
}
.ins, ins, ins *, span.ins, span.ins * {
  background-color: rgb(200, 250, 200);
  color: rgb(0, 136, 0);
  text-decoration: none;
}
.del, del, del *, span.del, span.del * {
  background-color: rgb(250, 200, 200);
  color: rgb(255, 0, 0);
  text-decoration: line-through;
  text-decoration-color: rgb(255, 0, 0);
}
math, span.math {
  font-family: serif;
  font-style: italic;
}
ul {
  list-style-type: "— ";
}
blockquote {
  counter-reset: paragraph;
}
div.numbered, div.newnumbered {
  margin-left: 2em;
  margin-top: 1em;
  margin-bottom: 1em;
}
div.numbered:before, div.newnumbered:before {
  position: absolute;
  margin-left: -2em;
  display-style: block;
}
div.numbered:before {
  content: counter(paragraph);
  counter-increment: paragraph;
}
div.newnumbered:before {
  content: "�";
}
div.numbered ul, div.newnumbered ul {
  counter-reset: list_item;
}
div.numbered li, div.newnumbered li {
  margin-left: 3em;
}
div.numbered li:before, div.newnumbered li:before {
  position: absolute;
  margin-left: -4.8em;
  display-style: block;
}
div.numbered li:before {
  content: "(" counter(paragraph) "." counter(list_item) ")";
  counter-increment: list_item;
}
div.newnumbered li:before {
  content: "(�." counter(list_item) ")";
  counter-increment: list_item;
}
</style>

# Intro

[[P0769R2]] was applied to the C++ working paper in
Rapperswil. That paper defines shifting a range by a negative `n` as a no-op in
item (7) of the design decisions section. The [LEWG discussion notes](http://wiki.edg.com/bin/view/Wg21albuquerque/P0769) from Albuquerque suggest that this design point was not discussed.

LEWG voted in San Diego to forward this proposal to LWG for C++20.

# Revisions

-   R1 adds wording and removes the suggested polls section.

# Concerns about current behavior

The current treatment of a negative shift as a shift of 0 seems unlikely to match user intent and may hide bugs. If the programmer explicitly wrote a negative value, they probably didn't expect a shift of 0. If the user specified a negative shift as the result of some programmatic calculation, it is likely that the calculation was incorrect, or that a shift in the opposite direction would be the correct behavior. Either way, implicitly shifting by 0 feels questionable.

# Proposal

We propose that shifting a range by a negative `n` be a precondition violation; that is, `shift_left` and `shift_right` should require that `n` be greater than or equal to 0. This is consistent with [`expr.shift`](http://eel.is/c++draft/expr.shift), which has a precondition that the right operand to `<<` and `>>` must be greater than or equal to 0. Compilers, static analyzers, and other analysis tools could more effectively warn programmers about such shifts if shifting by negative counts was a precondition violation.

# Non-Proposals

## Reverse shift when shifting by a negative `n`

Some users may expect a shift in the opposite direction when passing a negative `n` to `shift_left` and `shift_right`. The [LWG discussion notes](http://wiki.edg.com/bin/view/Wg21rapperswil2018/LWGP0769) on P0769R2 suggest that there are APIs which do this; one example is [perlop](https://perldoc.perl.org/perlop.html#Shift-Operators). This could have a non-trivial cost and is inconsistent with `expr.shift`, so we do not propose it here.

## Changing behavior of shifting by large `n`

`expr.shift` has another precondition that the right operand must be less than the length in bits of the left operand. We do not propose changing `shift_left` and `shift_right` to have a similar precondition, as we believe it would be valuable to allow shifting all elements out of a range.

# Wording

Note: The following changes are relative to the post-Rapperswil 2018 working draft of ISO/IEC 14882, ([[N4762]]).

Note: The � character is used to denote a placeholder number which shall be selected by the editor.

Modify 23.6.14 <a href="http://eel.is/c++draft/alg.shift">[alg.shift]</a> as follows:

<blockquote>
<b>23.6.14 Shift<span style="float: right;">[alg.shift]</span></b>

```
template<class ForwardIterator>
  constexpr ForwardIterator
    shift_left(ForwardIterator first, ForwardIterator last,
               typename iterator_traits<ForwardIterator>::difference_type n);
template<class ExecutionPolicy, class ForwardIterator>
  ForwardIterator
    shift_left(ExecutionPolicy&& exec, ForwardIterator first, ForwardIterator last,
               typename iterator_traits<ForwardIterator>::difference_type n);
```

<div class="numbered">
<span class="del">*Requires:*</span><span class="ins">*Mandates:*</span> The type of `*first` shall satisfy the <i>Cpp17MoveAssignable</i> requirements.
</div>

<div class="ins">
<div class="newnumbered">
*Expects:* `n >= 0`.
</div>
</div>

<div class="numbered">
*Effects:* If <span class="del">`n <= 0` or </span>`n >= last - first`, does nothing. Otherwise, moves the element from position `first + n + i` into position `first + i` for each non-negative integer `i < (last - first) - n`. In the first overload case, does so in order starting from `i = 0` and proceeding to `i = (last - first) - n - 1`.
</div>

<div class="numbered">
*Returns:* `first + (last - first - n)` if <span class="del">`n` is positive and </span>`n < last - first`, otherwise `first`<span class="del"> if `n` is positive, otherwise last</span>.
</div>

<div class="numbered">
*Complexity:* At most `(last - first) - n` assignments.
</div>

```
template<class ForwardIterator>
  constexpr ForwardIterator
    shift_right(ForwardIterator first, ForwardIterator last,
                typename iterator_traits<ForwardIterator>::difference_type n);
template<class ExecutionPolicy, class ForwardIterator>
  ForwardIterator
    shift_right(ExecutionPolicy&& exec, ForwardIterator first, ForwardIterator last,
                typename iterator_traits<ForwardIterator>::difference_type n);
```

<div class="numbered">
<span class="del">*Requires:*</span><span class="ins">*Mandates:*</span> The type of `*first` shall satisfy the <i>Cpp17MoveAssignable</i> requirements. <i>ForwardIterator</i> shall meet the <i>Cpp17BidirectionalIterator</i> requirements (<a href="http://eel.is/c++draft/bidirectional.iterators">[bidirectional.iterators]</a>) or the <i>Cpp17ValueSwappable</i> requirements.
</div>

<div class="ins">
<div class="newnumbered">
*Expects:* `n >= 0`.
</div>
</div>

<div class="numbered">
*Effects:* If <span class="del">`n <= 0` or </span>`n >= last - first`, does nothing. Otherwise, moves the element from position `first + i` into position `first + n + i` for each non-negative integer `i < (last - first) - n`. In the first overload case, if <i>ForwardIterator</i> satisfies the <i>Cpp17BidirectionalIterator</i> requirements, does so in order starting from `i = (last - first) - n - 1` and proceeding to `i = 0`.
</div>

<div class="numbered">
*Returns:* `first + n` if <span class="del">`n` is positive and </span>`n < last - first`, otherwise `last`<span class="del"> if `n` is positive, otherwise `first`</span>.
</div>

<div class="numbered">
*Complexity:* At most `(last - first) - n` assignments or swaps.
</div>
</blockquote>


# Acknowledgements

-   Bryce Adelstein Lelbach for the wording and Bikeshed formatting of this proposal.
-   Dan Raviv and Casey Carter for feedback on an earlier draft of this proposal.

